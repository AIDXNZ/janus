package qtum

import (
	"encoding/json"
	"reflect"
	"testing"
)

/*
	ContractInvokeInfo struct {
		// VMVersion string
		From     string
		GasLimit string
		GasPrice string
		CallData string
		To       string
	}

	// "1 7926223070547d2d15b2ef5e7383e541c338ffe9 6a473044022067ca66b0308ae16aeca7a205ce0490b44a61feebe5632710b52aabde197f9e4802200e8beec61a58dbe1279a9cdb68983080052ae7b9997bc863b7c5623e4cb55fd
	// b01210299d391f528b9edd07284c7e23df8415232a8ce41531cf460a390ce32b4efd112 OP_SENDER 4 6721975 100 6060604052341561000f57600080fd5b60008054600160a060020a033316600160a060020a03199091161790556101de8061003b6000
	// 396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630900f010811461005d578063445df0ac1461007e5780638da5cb5b146100a3578063fdacd576146100d257600080fd5b341561
	// 006857600080fd5b61007c600160a060020a03600435166100e8565b005b341561008957600080fd5b61009161017d565b60405190815260200160405180910390f35b34156100ae57600080fd5b6100b6610183565b604051600160a060020a039091168152
	// 60200160405180910390f35b34156100dd57600080fd5b61007c600435610192565b6000805433600160a060020a03908116911614156101795781905080600160a060020a031663fdacd5766001546040517c01000000000000000000000000000000000000
	// 0000000000000000000063ffffffff84160281526004810191909152602401600060405180830381600087803b151561016457600080fd5b6102c65a03f1151561017557600080fd5b5050505b5050565b60015481565b600054600160a060020a031681565b
	// 60005433600160a060020a03908116911614156101af5760018190555b505600a165627a7a72305820b6a912c5b5115d1a5412235282372dc4314f325bac71ee6c8bd18f658d7ed1ad0029 OP_CREATE"

	// 1    // address type of the pubkeyhash (public key hash)
	// Address               // sender's pubkeyhash address
	// {signature, pubkey}   //serialized scriptSig
	// OP_SENDER
	// 4                     // EVM version
	// 10                    //gas price
	// 100000                //gas limit
	// 1234                  // data to be sent by the contract
	// Contract Address/Sendee Address      // contract address/to field
	// OP_CALL
*/

func TestParseCallSenderASM(t *testing.T) {
	samStr := []string{"1", "7926223070547d2d15b2ef5e7383e541c338ffe9",
		"6a473044022067ca66b0308ae16aeca7a205ce0490b44a61feebe5632710b52aabde197f9e4802200e8beec61a58dbe1279a9cdb68983080052ae7b9997bc863b7c5623e4cb55fdb01210299d391f528b9edd07284c7e23df8415232a8ce41531cf460a390ce32b4efd112",
		"OP_SENDER", "4", "6721975", "100",
		"6060604052341561000f57600080fd5b60008054600160a060020a033316600160a060020a03199091161790556101de8061003b6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630900f010811461005d578063445df0ac1461007e5780638da5cb5b146100a3578063fdacd576146100d257600080fd5b341561006857600080fd5b61007c600160a060020a03600435166100e8565b005b341561008957600080fd5b61009161017d565b60405190815260200160405180910390f35b34156100ae57600080fd5b6100b6610183565b604051600160a060020a03909116815260200160405180910390f35b34156100dd57600080fd5b61007c600435610192565b6000805433600160a060020a03908116911614156101795781905080600160a060020a031663fdacd5766001546040517c010000000000000000000000000000000000000000000000000000000063ffffffff84160281526004810191909152602401600060405180830381600087803b151561016457600080fd5b6102c65a03f1151561017557600080fd5b5050505b5050565b60015481565b600054600160a060020a031681565b60005433600160a060020a03908116911614156101af5760018190555b505600a165627a7a72305820b6a912c5b5115d1a5412235282372dc4314f325bac71ee6c8bd18f658d7ed1ad0029",
		"OP_CREATE"}
	got, err := ParseCallSenderASM(samStr)
	if err != nil {
		t.Error(err)
	}
	want := &ContractInvokeInfo{
		From:     "7926223070547d2d15b2ef5e7383e541c338ffe9",
		GasLimit: "100",
		GasPrice: "6721975",
	}
	if !reflect.DeepEqual(got, want) {
		t.Errorf(
			"parse transaction call sam error\ninput: %s\nwant: %s\ngot: %s",
			samStr,
			string(mustMarshalIndent(want, "", "  ")),
			string(mustMarshalIndent(got, "", "  ")),
		)
	}
}

func TestParseCreateASM(t *testing.T) {
	samStr := []string{"4", "6721975", "40", "608060405234801561001057600080fd5b506040516020806100f2833981016040525160005560bf806100336000396000f30060806040526004361060485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166360fe47b18114604d5780636d4ce63c146064575b600080fd5b348015605857600080fd5b5060626004356088565b005b348015606f57600080fd5b506076608d565b60408051918252519081900360200190f35b600055565b600054905600a165627a7a7230582049a087087e1fc6da0b68ca259d45a2e369efcbb50e93f9b7fa3e198de6402b8100290000000000000000000000000000000000000000000000000000000000000001", "OP_CREATE"}
	got, err := ParseCreateSenderASM(samStr)
	if err != nil {
		t.Error(err)
	}
	want := &CreateASM{
		ASM: ASM{
			VMVersion:   "4",
			GasLimitStr: "6721975",
			GasPriceStr: "40",
			Instructor:  "OP_CREATE",
		},
		callData: "608060405234801561001057600080fd5b506040516020806100f2833981016040525160005560bf806100336000396000f30060806040526004361060485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166360fe47b18114604d5780636d4ce63c146064575b600080fd5b348015605857600080fd5b5060626004356088565b005b348015606f57600080fd5b506076608d565b60408051918252519081900360200190f35b600055565b600054905600a165627a7a7230582049a087087e1fc6da0b68ca259d45a2e369efcbb50e93f9b7fa3e198de6402b8100290000000000000000000000000000000000000000000000000000000000000001",
	}
	if !reflect.DeepEqual(got, want) {
		t.Errorf(
			"parse transaction create sam error\ninput: %s\nwant: %s\ngot: %s",
			samStr,
			string(mustMarshalIndent(want, "", "  ")),
			string(mustMarshalIndent(got, "", "  ")),
		)
	}
}

func mustMarshalIndent(v interface{}, prefix, indent string) []byte {
	res, err := json.MarshalIndent(v, prefix, indent)
	if err != nil {
		panic(err)
	}
	return res
}
